using Lib.UX.DataForms;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using Invoices.Logic.DataModules;
using Invoices.Logic.Entities;
using Lib.Logic;
using Lib.UX.DataGrid;
using Lib.UX.DataForms;

namespace Invoices.UX.WinForms
{
    public partial class CViewEntityAppInvoice : Form, IEntityViewForm
    {

        protected CDMAppInvoices module { get; set; }
        protected CEditableGridDecorator detailsGrid;
        protected DataGridViewCheckBoxColumn? cbcItem = null;
        public CViewEntityAppInvoice()
        {
            InitializeComponent();
        }

        public void SetParent(Form p_oForm)
        {
            CFormTemplateMaster oMasterForm = (CFormTemplateMaster)p_oForm;

            this.detailsGrid = new CEditableGridDecorator(this.dgvDetails, oMasterForm.FormContext);
            oMasterForm.DetailGrids.Add(this.detailsGrid);
            this.module = (CDMAppInvoices)oMasterForm.Module;
        }

        public void WriteMasterToUI()
        {
            CAppInvoices oCurrentInvoice = this.module.AppInvoicesModel.Master;
            this.txtFullName.Text = oCurrentInvoice.id.ToString();
            this.txtCustomerId.Text = oCurrentInvoice.customerId.ToString();
            this.addLookupOnDetailList();

        }

        public void ReadMasterFromUI()
        {
            CAppInvoices oCurrentInvoice = this.module.AppInvoicesModel.Master;
            oCurrentInvoice.id = Convert.ToInt32(this.txtFullName.Text);
            oCurrentInvoice.customerId = Convert.ToInt32(this.txtCustomerId.Text);
            oCurrentInvoice.Change = EntityChangeType.UPDATED;
        }

        public void WriteDetailListToUI()
        {
            this.detailsGrid.Populate<CAppInvoicesLine>(this.module.AppInvoicesModel.Details);

        }

        protected void addLookupOnDetailList()
        {
            DataGridViewColumn? oFoundColumn = null;
            int nIndex = 0;
            foreach (DataGridViewColumn oColumn in this.dgvDetails.Columns)
            {
                if (oColumn.DataPropertyName == "ItemId")
                {
                    oFoundColumn = oColumn;
                    break;
                }
                nIndex++;
            }
            if (oFoundColumn != null)
            {
                oFoundColumn.Visible = false;
            }


        }

        private void DoOnAnyCommand(object sender, EventArgs e)
        {
            if (sender == btnNewDetail)
            {
                this.detailsGrid.CreateRow<CAppInvoicesLine>(new CAppInvoicesLine());
            }
            else if (sender == btnDeleteDetail)
            {
                this.detailsGrid.DeleteRow();
            }
        }
    }
}
